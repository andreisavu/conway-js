if (typeof fireunit !== "undefined") {
    var f = fireunit;

    f.compare([1, 2].sum(), 3, "Test Array.prototype.sum();");
    f.compare([undefined, 2].sum(), 2, "Test Array.prototype.sum(); with undefined elements");

    var game = new Game([
        [1, 0],
        [0, 0],
    ]);
    f.ok(game.elementAt(0, 0) === 1, "Test elementAt();");
    f.ok(game.elementAt(-1, -1) === undefined, "Test elementAt(); returns undefined for negative values");

    // f.compare("<span>&diams;</span>", render(game), "Test render();");

    f.ok(Game.compare(game, game), "Test Game.compare();");

    var nextGeneration     = game.nextGeneration();
    var expectedGeneration = new Game([[0, 0], [0, 0]]);
    f.ok(Game.compare(nextGeneration, expectedGeneration), "Test nextGeneration(); first rule");

    nextGeneration     = new Game([
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
    ]).nextGeneration();
    expectedGeneration = new Game([
        [1, 0, 1],
        [0, 0, 0],
        [1, 0, 1],
    ]);
    f.ok(Game.compare(nextGeneration, expectedGeneration), "Test nextGeneration(); second rule");


    nextGeneration     = new Game([
        [1, 1, 0],
        [1, 0, 1],
        [1, 0, 1],
    ]).nextGeneration();
    expectedGeneration = new Game([
        [1, 1, 0],
        [1, 0, 1],
        [0, 0, 0],
    ]);
    f.ok(Game.compare(nextGeneration, expectedGeneration), "Test nextGeneration(); third rule");


    nextGeneration     = new Game([
        [0, 1, 0],
        [1, 0, 1],
        [0, 0, 0],
    ]).nextGeneration();
    expectedGeneration = new Game([
        [0, 1, 0],
        [0, 1, 0],
        [0, 0, 0],
    ]);
    f.ok(Game.compare(nextGeneration, expectedGeneration), "Test nextGeneration(); fourth rule");


    f.ok(game.neighboursNumber(1, 0) === 1, "Test neighboursNumber();");

    f.testDone();
}

window.addEventListener("DOMContentLoaded", function () {
    var patterns = {
        pulsar:[
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0],
            [0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0],
            [0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0],
            [0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0],
            [0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0],
            [0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0],
            [0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        toad:[
            [0,0,0,0,0,0],
            [0,0,0,0,0,0],
            [0,0,1,1,1,0],
            [0,1,1,1,0,0],
            [0,0,0,0,0,0],
            [0,0,0,0,0,0]
        ],
        blinker:[
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,1,1,1,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
        ],
        beacon:[
            [0,0,0,0,0,0],
            [0,1,1,0,0,0],
            [0,1,0,0,0,0],
            [0,0,0,0,1,0],
            [0,0,0,1,1,0],
            [0,0,0,0,0,0]
        ],
        block:[
            [0,0,0,0],
            [0,1,1,0],
            [0,1,1,0],
            [0,0,0,0]
        ],
        beehive:[
            [0,0,0,0,0,0],
            [0,0,1,1,0,0],
            [0,1,0,0,1,0],
            [0,0,1,1,0,0],
            [0,0,0,0,0,0],
        ],
        glider:[
            [0,0,0,0,0,0,0,0,0,0,0,0],
            [0,1,0,0,0,0,0,0,0,0,0,0],   
            [0,0,1,1,0,0,0,0,0,0,0,0],   
            [0,1,1,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0],   
            [0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        lwss:[
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        gospelgun:[
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0],
            [0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ]
    };

    function id(name) { 
        return document.getElementById(name);
    }

    var game = new Game(patterns[id('patterns').value]);
    id("panel").innerHTML = render(game);

    id("next").addEventListener("click", function () {
        game = game.nextGeneration();
        document.getElementById("panel").innerHTML = render(game);
    }, false);

    id("play").addEventListener("click", function () {
        if(id("play").innerHTML == "Stop") {
            id('next').stop = true;
            id("play").innerHTML = "Play";
        } else {
            id('next').stop = false;
            (function doRun() {
                id("next").click();
                if(id('next').stop == false) {
                    setTimeout(doRun, 300);
                }
            })();
            id("play").innerHTML = "Stop";
        }
    }, false);

    id("patterns").addEventListener("change", function() {
        game = new Game(patterns[id('patterns').value]);
        id("panel").innerHTML = render(game);
    }, false);

}, false);
